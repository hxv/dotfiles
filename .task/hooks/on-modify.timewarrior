#!/usr/bin/python3

from __future__ import print_function

import json
import subprocess
import sys

from pprint import pprint

try:
    input_stream = sys.stdin.buffer
except AttributeError:
    input_stream = sys.stdin

old = json.loads(input_stream.readline().decode("utf-8", errors="replace"))
new = json.loads(input_stream.readline().decode("utf-8", errors="replace"))
print(json.dumps(new))

def extract_tags_from(json_obj):
    # Extract attributes for use as tags.
    tags = [json_obj['description'], json_obj['uuid']]

    if 'project' in json_obj:
        tags.append(json_obj['project'])

    if 'tags' in json_obj:
        tags.extend(json_obj['tags'])

    return tags

start_or_stop = ''

if 'start' in new and 'start' not in old:
    start_or_stop = 'start'
elif ('start' not in new or 'end' in new) and 'start' in old:
    start_or_stop = 'stop'

if start_or_stop:
    tags = extract_tags_from(new)

    subprocess.call(['timew', start_or_stop] + tags + [':yes'])
else:
    output = subprocess.check_output(['timew', 'export', new['uuid']])
    records = json.loads(output)

    new_tags = new.get('tags', [])
    old_tags = old.get('tags', [])

    if new['description'] != old['description']:
        for record in records:
            subprocess.call(['timew', 'untag', '@' + str(record['id']), old['description'], ':yes'])
            subprocess.call(['timew', 'tag', '@' + str(record['id']), new['description'], ':yes'])

    added_tags = list(set(new_tags) - set(old_tags))
    removed_tags = list(set(old_tags) - set(new_tags))

    if len(added_tags) > 0:
        for record in records:
            subprocess.call(['timew', 'tag', '@' + str(record['id'])] + added_tags + [':yes'])

    if len(removed_tags) > 0:
        for record in records:
            subprocess.call(['timew', 'untag', '@' + str(record['id'])] + removed_tags + [':yes'])

